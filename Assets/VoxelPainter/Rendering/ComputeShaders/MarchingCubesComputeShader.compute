#include "PrecomputedTables.hlsl"

#pragma kernel CSMain
#pragma target 5.0

// Define the main compute function
// Using AppendStructuredBuffer<int> for triangle indices
AppendStructuredBuffer<int3> AppendedTriangles;
RWStructuredBuffer<float3> SubVertices;
StructuredBuffer<int> BaseVerticesValues;
StructuredBuffer<int> CubeEdgeFlags;
StructuredBuffer<int> TriangleConnectionTable;

int4 VertexAmount; // w represents the cube floor
int4 CubeAmount; // w represents the cube floor
int2 Offsets; // x middle offset, y top offset
bool UseLerp;
float Threshold;
int AmountOfCubes;
bool EnforceEmptyBorder;

static const int ValueBits = 11; // First bits store value as 0f-1f
static const int Values = 1 << ValueBits;
static const int ValueMask = (1 << ValueBits) - 1;
static const float ValueMultiplier = 1.0f / ValueMask;

int3 ConvertIndexToPosition(uint i, uint floorSize)
{
    uint3 pos = int3(0, 0, 0);
    pos.x = i % VertexAmount.x;
    pos.z  = (i % floorSize) / VertexAmount.x;
    pos.y  = i / floorSize;
            
    return pos;
}

float GetBaseVerticesValue(uint index)
{
    if (EnforceEmptyBorder)
    {
        int3 pos = ConvertIndexToPosition(index, VertexAmount.x * VertexAmount.z);
        if (pos.x == 0 || pos.x == VertexAmount.x - 1 || pos.y == 0 || pos.y == VertexAmount.y - 1 || pos.z == 0 || pos.z == VertexAmount.z - 1)
        {
            return 0;
        }
    }
    
    int encodedValue = BaseVerticesValues[index];

    // Extract the last 10 bits (mask with 0x3FF = 1023, which is 10 bits of 1s)
    int last10BitsValue = encodedValue & ValueMask;  // This extracts the last 10 bits

    // Convert the 10 bits to a float value between 0 and 1
    return last10BitsValue * ValueMultiplier;
}

void GetMarchedCube(
    inout uint baseVerticesOffsets[8],
    inout int subVerticesOffsets[12],
    int xPos,
    int yPos,
    int zPos)
{
    uint cubeIndex = 0u;
    for (uint index = 0u; index < CornersPerCube; index++)
    {
        float value = GetBaseVerticesValue(baseVerticesOffsets[index]);
        
        if (value > Threshold)
        {
            cubeIndex |= (1 << index);
        }
    }
    
    // Skip processing if cube is entirely inside or outside the surface
    if (cubeIndex == 0u || cubeIndex == 255)
    {
        return;
    }
    
    int cubeEdgeFlags = CubeEdgeFlags[cubeIndex];
    
    [unroll]
    for (int edgeIndex = 0u; edgeIndex < EdgesPerCube; edgeIndex++)
    {
        uint startPointLocal = EdgeConnection[edgeIndex * EdgeConnectionTableRowSize + 0u];
        uint endPointLocal = EdgeConnection[edgeIndex * EdgeConnectionTableRowSize + 1u];
        
        uint startPoint = baseVerticesOffsets[startPointLocal];
        uint endPoint = baseVerticesOffsets[endPointLocal];
        
        float startValue = GetBaseVerticesValue(startPoint);
        float endValue = GetBaseVerticesValue(endPoint);
        
        bool hasCrossing = (cubeEdgeFlags & (1 << edgeIndex)) != 0;

        float offset = 0.5f;
        if (UseLerp && hasCrossing)
        {
            offset = (Threshold - startValue) / (endValue - startValue);
        }
        
        int index = subVerticesOffsets[edgeIndex];
        
        float newX = EdgeDirection[edgeIndex * EdgeDirectionTableRowSize + 0u] * offset + CubeCornersPositions[startPointLocal * CubeCornersPositionsRowSize + 0u] + xPos;
        float newY = EdgeDirection[edgeIndex * EdgeDirectionTableRowSize + 1u] * offset + CubeCornersPositions[startPointLocal * CubeCornersPositionsRowSize + 1u] + yPos;
        float newZ = EdgeDirection[edgeIndex * EdgeDirectionTableRowSize + 2u] * offset + CubeCornersPositions[startPointLocal * CubeCornersPositionsRowSize + 2u] + zPos;
        SubVertices[index] = float3(newX, newY, newZ);
    }

    for (uint i = 0u; i < TriangleConnectionTableWidth - 1;)
    {
        int vertexIndex = TriangleConnectionTable[cubeIndex * TriangleConnectionTableRowSize + i];
        if (vertexIndex == -1)
        {
            break;
        }

        int x;
        int y;
        int z;
        [unroll]
        for (int j = 0; j < 3; j++)
        {
            int winding;
            
            if (Threshold > 0)
            {
                winding = 2 - j;
            }
            else
            {
                winding = j;
            }

            // Calculate the local vertex index
            int localVertexIndex = TriangleConnectionTable[cubeIndex * TriangleConnectionTableRowSize + i + winding];
            
            // Assign values to the correct component of the int3
            if (j == 0)
            {
                x = subVerticesOffsets[localVertexIndex];
            }
            else if (j == 1)
            {
                y = subVerticesOffsets[localVertexIndex];
            }
            else if (j == 2)
            {
                z = subVerticesOffsets[localVertexIndex];
            }
        }
        
        i += 3;
        AppendedTriangles.Append(int3(x, y, z));
    }
}


// Define the main compute function
[numthreads(32, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    uint index = id.x;
    
    if (index >= (uint) AmountOfCubes)
    {
        return;
    }

    int xIndex = index % CubeAmount.x;
    int zIndex = (index % CubeAmount.w) / CubeAmount.x;
    int yIndex = index / CubeAmount.w;

    
    int indexOffset = xIndex + zIndex * (CubeAmount.x + VertexAmount.x) + yIndex * Offsets.y;
    int middleIndexOffset = Offsets.x - zIndex * CubeAmount.x;

    int subVerticesOffsets[12];
    // Front face
    subVerticesOffsets[0] = indexOffset;
    subVerticesOffsets[1] = indexOffset + middleIndexOffset + 1;
    subVerticesOffsets[2] = indexOffset + Offsets.y;
    subVerticesOffsets[3] = indexOffset + middleIndexOffset;

    // Back face
    subVerticesOffsets[4] = indexOffset + CubeAmount.x + VertexAmount.x;
    subVerticesOffsets[5] = indexOffset + middleIndexOffset + VertexAmount.x + 1;
    subVerticesOffsets[6] = indexOffset + Offsets.y + VertexAmount.x + CubeAmount.x;
    subVerticesOffsets[7] = indexOffset + middleIndexOffset + VertexAmount.x;
    
    // Middle face
    subVerticesOffsets[8] = indexOffset + CubeAmount.x;
    subVerticesOffsets[9] = indexOffset + CubeAmount.x + 1;
    subVerticesOffsets[10] = indexOffset + Offsets.y + CubeAmount.x + 1;
    subVerticesOffsets[11] = indexOffset + Offsets.y + CubeAmount.x;
    
    uint baseIndexOffset = xIndex + zIndex * VertexAmount.x + yIndex * VertexAmount.w;
    
    uint baseVerticesOffsets[8];
    // Front face
    baseVerticesOffsets[0] = baseIndexOffset;
    baseVerticesOffsets[1] = baseIndexOffset + 1;
    baseVerticesOffsets[2] = baseIndexOffset + VertexAmount.w + 1;
    baseVerticesOffsets[3] = baseIndexOffset + VertexAmount.w;

    // Back face
    baseVerticesOffsets[4] = baseIndexOffset + VertexAmount.x;
    baseVerticesOffsets[5] = baseIndexOffset + VertexAmount.x + 1;
    baseVerticesOffsets[6] = baseIndexOffset + VertexAmount.x + VertexAmount.w + 1;
    baseVerticesOffsets[7] = baseIndexOffset + VertexAmount.x + VertexAmount.w;

    GetMarchedCube(
    baseVerticesOffsets,
    subVerticesOffsets,
    xIndex,
    yIndex,
    zIndex);       
}

